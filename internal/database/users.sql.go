// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const authenticate = `-- name: Authenticate :one
SELECT id, username
FROM users
WHERE email = $1
AND password = crypt($2, password)
`

type AuthenticateParams struct {
	Email string
	Password string
}

type AuthenticateRow struct {
	ID       uuid.UUID
	Username string
}

func (q *Queries) Authenticate(ctx context.Context, arg AuthenticateParams) (AuthenticateRow, error) {
	row := q.db.QueryRowContext(ctx, authenticate, arg.Email, arg.Password)
	var i AuthenticateRow
	err := row.Scan(&i.ID, &i.Username)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users(id, email, password, created_at, updated_at, username)
VALUES ($1, $2, crypt($3, gen_salt('bf')), $4, $5, $6)
RETURNING id, email, password, created_at, updated_at, username
`

type CreateUserParams struct {
	ID        uuid.UUID
	Email     string
	Crypt     string
	CreatedAt time.Time
	UpdatedAt time.Time
	Username  string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.Crypt,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Username,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
	)
	return i, err
}

const selectUser = `-- name: SelectUser :one
SELECT id, email, password, created_at, updated_at, username
FROM users
WHERE email = $1
`

func (q *Queries) SelectUser(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, selectUser, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
	)
	return i, err
}
